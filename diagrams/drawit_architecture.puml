@startuml DrawIt Application Architecture
!pragma layout smetana

' Define styles for different components
skinparam class {
  BackgroundColor<<View>> LightGreen
  BackgroundColor<<ViewModel>> LightBlue
  BackgroundColor<<Repository>> LightSalmon
  BackgroundColor<<API>> LightYellow
  BackgroundColor<<Util>> LightGray
}

skinparam package {
  BackgroundColor White
  BorderColor Black
}

' Package definitions
package "View Layer" {
  ' Authentication Views
  class LoginFragment <<View>> {
    +onCreateView()
    +onViewCreated()
    +handleLogin()
    --
    Handles user authentication
  }
  
  class RegisterFragment <<View>> {
    +onCreateView()
    +onViewCreated()
    +handleRegistration()
    --
    Manages new user registration
  }
  
  class ProfileFragment <<View>> {
    +onCreateView()
    +onViewCreated()
    +updateProfile()
    --
    Shows user profile information
  }
  
  ' Lobby Views
  class LobbiesFragment <<View>> {
    +onCreateView()
    +onViewCreated()
    +createLobby()
    +joinLobby()
    --
    Lists available game lobbies
  }
  
  class LobbyDetailFragment <<View>> {
    +onCreateView()
    +onViewCreated()
    +startGame()
    +leaveLobby()
    --
    Shows lobby details and players
  }
  
  ' Game Views
  class GameFragment <<View>> {
    +onCreateView()
    +onViewCreated()
    +handleDrawing()
    +submitGuess()
    +sendChatMessage()
    --
    Main game screen with drawing canvas
    and chat functionality
  }
  
  class GameResultsFragment <<View>> {
    +onCreateView()
    +onViewCreated()
    --
    Displays final game scores
  }
  
  ' Archive Views
  class DrawingArchiveFragment <<View>> {
    +onCreateView()
    +onViewCreated()
    --
    Lists saved drawings
  }
  
  class DrawingDetailFragment <<View>> {
    +onCreateView()
    +onViewCreated()
    --
    Shows drawing details
  }
}

package "ViewModel Layer" {
  class AuthViewModel <<ViewModel>> {
    +login()
    +register()
    +logout()
    --
    Manages authentication state
  }
  
  class LobbyViewModel <<ViewModel>> {
    +getLobbies()
    +createLobby()
    +joinLobby()
    +leaveLobby()
    +startGame()
    --
    Manages lobby operations
  }
  
  class GameViewModel <<ViewModel>> {
    +joinGame()
    +submitGuess()
    +sendDrawingUpdate()
    +sendChatMessage()
    --
    Handles game state and actions
  }
  
  class DrawingArchiveViewModel <<ViewModel>> {
    +getDrawings()
    +getDrawingDetails()
    --
    Manages drawing archive
  }
}

package "Repository Layer" {
  class UserRepository <<Repository>> {
    +login()
    +register()
    +getProfile()
    +updateProfile()
    --
    Manages user data
  }
  
  class LobbyRepository <<Repository>> {
    +getLobbies()
    +createLobby()
    +joinLobby()
    +leaveLobby()
    --
    Handles lobby operations
  }
  
  class GameRepository <<Repository>> {
    +joinGame()
    +startGame()
    +submitGuess()
    +sendDrawingUpdate()
    +sendChatMessage()
    --
    Manages game state
  }
  
  class DrawingRepository <<Repository>> {
    +saveDrawing()
    +getDrawings()
    +getDrawingById()
    --
    Handles drawing storage
  }
}

package "API Layer" {
  class ApiService <<API>> {
    +login()
    +register()
    +getLobbies()
    +createLobby()
    +startGame()
    --
    REST API communication
  }
  
  class WebSocketService <<API>> {
    +connect()
    +disconnect()
    +sendMessage()
    +setCallback()
    --
    Real-time WebSocket communication
  }
}

package "Utility Layer" {
  class WebSocketMessageConverter <<Util>> {
    +convertToLobby()
    +convertToGame()
    +parseChatMessage()
    +parseGameState()
    --
    Converts WebSocket messages to model objects
  }
  
  class DrawingUtils <<Util>> {
    +serializeDrawing()
    +deserializeDrawing()
    --
    Drawing serialization utilities
  }
}

' Define relationships
LoginFragment --> AuthViewModel
RegisterFragment --> AuthViewModel
ProfileFragment --> AuthViewModel
AuthViewModel --> UserRepository
UserRepository --> ApiService
UserRepository --> WebSocketService

LobbiesFragment --> LobbyViewModel
LobbyDetailFragment --> LobbyViewModel
LobbyViewModel --> LobbyRepository
LobbyRepository --> ApiService
LobbyRepository --> WebSocketService

GameFragment --> GameViewModel
GameResultsFragment --> GameViewModel
GameViewModel --> GameRepository
GameRepository --> ApiService
GameRepository --> WebSocketService
GameRepository ..> WebSocketMessageConverter

DrawingArchiveFragment --> DrawingArchiveViewModel
DrawingDetailFragment --> DrawingArchiveViewModel
DrawingArchiveViewModel --> DrawingRepository
DrawingRepository --> ApiService

WebSocketService ..> WebSocketMessageConverter

@enduml
